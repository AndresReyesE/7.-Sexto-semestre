package Project;

import javafx.application.Platform;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.scene.image.ImageView;
import javafx.scene.paint.Color;

import java.net.URL;
import java.util.ResourceBundle;

/*
 * Carlos Andrés Reyes Evangelista
 * Universidad de las Américas Puebla
 * Ingeniería en Sistemas Computacionales
 *
 * May 9, 2019
 */

/**
 * Controller for the Parameter Selection View, handles events generated by the user
 */
public class ParameterSelectionController implements Initializable {
	
	private int currentTournamentSize;
	
	private SceneMediator mediator;
	private Model model;
	
	@FXML
	Spinner <Integer> spinnerNumberOfGenerations, spinnerPopulationSize, spinnerTournamentSize, spinnerMazeLevel, spinnerRadius, spinnerSimulationTime;
	@FXML
	Spinner <Double> spinnerMutationRate;
	@FXML
	ImageView imageClose;
	@FXML
	Button buttonAccept;
	@FXML
	ColorPicker colorPicker;
	@FXML
	CheckBox checkboxElitism;
	
	
	void setMediator(SceneMediator mediator) {
		this.mediator = mediator;
	}
	
	void setModel(Model model) {
		this.model = model;
	}
	
	/*
	EVENT HANDLERS
	 */
	
	/**
	 * Whenever the value of the population size spinner changes the upper threshold for the tournament size one is
	 * decreased/incremented for it not to allow a tournament size higher than a population one
	 */
	@FXML
	public void updatePopulationSize() {
		int currentPopulationSize = spinnerPopulationSize.getValue();
		spinnerTournamentSize.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(2, currentPopulationSize, currentTournamentSize, 5));
	}
	
	@FXML
	public void updateTournamentSize() {
		currentTournamentSize = spinnerTournamentSize.getValue();
	}
	
	/**
	 * When the button is clicked the values of every spinner are obtained and sent to the model for the
	 * creation of the genetic algorithm, the maze (obstacle course) and the bouncers
	 * and the scene is changed to the simulation view
	 */
	@FXML
	public void acceptClicked() {
		int currentNumberOfGenerations = spinnerNumberOfGenerations.getValue();
		int currentPopulationSize = spinnerPopulationSize.getValue();
		int currentTournamentSize = spinnerTournamentSize.getValue();
		double currentMutationRate = spinnerMutationRate.getValue();
		boolean elitism = checkboxElitism.isSelected();
		
		int currentLevel = spinnerMazeLevel.getValue();
		int currentRadius = spinnerRadius.getValue();
		int simulationTime = spinnerSimulationTime.getValue();
		Color bouncersColor = colorPicker.getValue();
		
		model.createGeneticAlgorithm(currentNumberOfGenerations, currentPopulationSize, currentTournamentSize, currentMutationRate, elitism);
		model.setUserParameters(currentLevel, currentRadius, bouncersColor, simulationTime);
		
		mediator.activate("Simulation view");
	}
	
	@FXML
	public void closeClicked() {
		System.out.println("Closing program...");
		Platform.exit();
		System.exit(0);
	}
	
	
	@Override
	public void initialize(URL url, ResourceBundle resourceBundle) {
		currentTournamentSize = 10;
		/*
		Set the upper and lower limits for each spinner, the initial value (a recommended one) and the step per click
		on the increase and decrease button
		 */
		spinnerNumberOfGenerations.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(2, 100, 15));
		spinnerPopulationSize.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(4, 10000, 100, 50));
		spinnerTournamentSize.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(2, 40, 20, 5));
		spinnerMutationRate.setValueFactory(new SpinnerValueFactory.DoubleSpinnerValueFactory(0, 1, 0.15, 0.05));
		
		spinnerMazeLevel.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(1, 2, 3));
		spinnerRadius.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(5, 20, 8));
		spinnerSimulationTime.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(2, 30, 3));
		
		colorPicker.setValue(Color.DARKBLUE);
	}
}
