package GeneticAlgorithm;

import java.util.Random;

/*
 * Carlos Andrés Reyes Evangelista
 * Universidad de las Américas Puebla
 * Ingeniería en Sistemas Computacionales
 *
 * May 9, 2019
 */

/**
 * The representation of an individual in this problem is a set of parameters that define aspects
 * that can be used to describe a bouncer location and movement.
 *
 * IMPORTANT: An Individual IS NOT a Bouncer, but the parameters required to create and manage one
 * These two concepts are related in the following way:
 * 1. An Individual is generated by setting the values of the attributes defined in this class
 * 2. Those values are used to create a Bouncer
 * 3. A Bouncer will participate in a simulation and based on its performance it will
 *    receive a fitness value
 * 4. Once the Bouncer receive its fitness value it will set that value to the Individual from which it was created
 */
public class Individual {
	/**
	 * Coordinate in the X-axis in which the center of the Bouncer will spawn
	 */
	private double  initialX;
	
	/**
	 * Coordinate in the Y-axis in which the center of the Bouncer will spawn
	 */
	private double  initialY;
	
	/**
	 * Radians angle indicating the initial direction the bouncer will move to
	 */
	private double  initialDirection;
	
	/**
	 * The amount of milliseconds the bouncer will wait before move for the first time
	 */
	private long    initialDelay;
	
	/**
	 * Amount of pixels this bouncer should move every time it moves
	 */
	private double  velocity;
	
	/**
	 * Quantifiable description of how well or how bad these parameters are for a bouncer to reach the target zone
	 * in the predefined time
	 */
	private double  fitnessValue;
	
	
	public Individual(double initialX, double initialY, double initialDirection, long initialDelay, double velocity) {
		this.initialX           = initialX;
		this.initialY           = initialY;
		this.initialDirection   = initialDirection;
		this.initialDelay       = initialDelay;
		this.velocity           = velocity;
	}
	
	/*
	GETTERS
	 */
	public double getInitialX() {
		return initialX;
	}
	
	public double getInitialY() {
		return initialY;
	}
	
	public double getInitialDirection() {
		return initialDirection;
	}
	
	public long getInitialDelay() {
		return initialDelay;
	}
	
	public double getVelocity() {
		return velocity;
	}
	
	public double getFitnessValue() {
		return fitnessValue;
	}
	
	/*
	SETTERS
	 */
	public void setFitnessValue(double fitnessValue) {
		this.fitnessValue = fitnessValue;
	}
	
	/*
	METHODS
	 */
	
	/**
	 * Randomly and slightly vary the values of these parameters
	 */
	void mutate() {
		Random random = new Random(System.currentTimeMillis());
		/*
		The initial coordinates may vary 5 pixels around its original values
		 */
		this.initialX += random.nextDouble() * 10 - 5;
		this.initialY += random.nextDouble() * 10 - 5;
		
		/*
		The direction may vary +- π/16 from its original angle
		 */
		this.initialDirection += random.nextDouble() * (Math.PI/16) - (Math.PI/32);
		
		/*
		The velocity may change in +- 0.5 pixels per frame
		 */
		this.velocity += random.nextDouble() * 1 - 0.5;
		
		/*
		The delay may vary 1/4 of second from its initial value
		 */
		this.initialDelay += random.nextLong() % 500 - 250;
		
		//As this modifications may produce negative or unfair results, they gotta be normalized
		//Unfair: out of the original bounds leading to unwanted potential advantage over other Bouncers
		normalize();
	}
	
	/**
	 * Delimit negative and unfair values
	 * Every value should be within the limits established in GeneticAlgorithm.Population.initialize()
	 */
	private void normalize() {
		this.initialX = initialX < 0 ? 0 : (initialX > 100) ? 100 : initialX;
		this.initialY = initialY < 0 ? 0 : (initialY > 100) ? 100 : initialY;
		this.velocity = velocity < 1 ? 1 : (velocity > 3) ? 3 : velocity;
		this.initialDelay = initialDelay < 0 ? 0 : (initialDelay > 2000) ? 2000 : initialDelay;
	}
	
	public String toString() {
		return "x = " + String.format("%.2f", initialX) +
				       ", y = " + String.format("%.2f", initialY) +
				       ", direction = " + String.format("%.2f", initialDirection)
				       + ", delay = " + initialDelay +
				       ", velocity = " + String.format("%.2f", velocity) +
				       ", fitness value = " + String.format("%.2f", fitnessValue);
	}
}
