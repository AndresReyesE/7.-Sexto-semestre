Open distributed system -> system that offers services according to standard rules that describe the syntax and semantics of those services. 
Computer networks [standard rules] -> formalized in protocols
Distributed systems [services] -> specified through interfaces (Interface Definition Language) 

Interface definitions written in IDL nearly always capture only the syntax of services. [names of the functions, types of the parameters, return values, possible exceptions. These allow:
	- an arbitrary process that needs a certain interface to communicate to another process that provides that interface. 
	- Two independent parties to build completely different implementations of those interfaces, leading to two separated DS that operate in the exactly same way.

Proper specifications:
	-> Complete: everything that is necessary to make an implementation has, indeed, been specified
	-> Neutral: specification don't prescribe what an implementation should look like
    Are important for:
	    Interoperability: two implementations of systems from different sources can co-exist and work together since both rely on each other's services pre-specified by a common standard.
	    Portability: an application developed for a DS A can be executed, without modification, on a DS B that implements the same interfaces as A 

Another goals:
    >Flexible: easy to configure the system out of different components possibly from different developers
    >Extensible: easy to add new components or replace existing ones without affecting those components that stay in place
