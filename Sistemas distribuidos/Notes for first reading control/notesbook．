		> Users and apps shouldn't be able to say when parts are being added, replaced or fixed
In order to support heterogeneous computers and networks while offering a single system view:
	> DS are organized with a layer of software that's logically placed between a higher-level layer consisting of users and applications
	> A layer underneath consisting of operative systems
    This kind of distributed system are called Middleware.

If the system as a whole looks and acts like a classical single-processor timesharing system, it qualifies as a distributed system.

A distributed system should:
 - Easily connect users to resources
 - Hide the fact that resources are distributed
 - be open
 - Be scalable

If a DS is able to present itself to users and apps as if it were only a single computer -> the DS is transparent

Types of transparency:
Access:		Hide differences in data representation and how a resource is accesed
	Deals with data representation and the way resources can be accessed by users.

Location:	Hide where a resource is located
	Users shouldn't be able to tell where a resource is phisically located

Migration:	Hide that a resource may move to another location
	Users should be able to access a resource in the same way even if it has been moved

Relocation: 	Hide that a resource may be moved to another location while in use
	Users shouldn't be able to notice that a resource they're accessing it being moved.

Replication:	Hide that a resource is replicated
	Deals with the fact that several copies of a resource exist

Concurrency:	Hide that a resource may be shared by several competitive users
	Users shouldn't be able to notice that other user is making use of the same resource

Failure:	Hide a failure and recovery of a resource
	Users do not notice that a resource fails to work properly AND the system recovers itself from that failure

Persistance:	Hide whether a resource is in memory or on disk
	Deals with masking whether a resource is in volatile memory or perhaps somewhere on a disk


Little endian 	-> high-order bytes are transmitted first
Big endian 	-> low-order bytes are transmitted first


